#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>
#include <sys/select.h>

#define BUFFER_SIZE 1024
#define SOP 0x7E
#define EOP 0x7E
#define ESC 0x7D

void byte_stuffing(char *data, int len, char *stuffed_data) {
    int stuffed_len = 0;
    for (int i = 0; i < len; i++) {
        if (data[i] == SOP || data[i] == EOP || data[i] == ESC) {
            stuffed_data[stuffed_len++] = ESC;
            stuffed_data[stuffed_len++] = data[i] ^ 0x20;
        } else {
            stuffed_data[stuffed_len++] = data[i];
        }
    }
    stuffed_data[stuffed_len] = '\0';
}

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];
    char stuffed_buffer[BUFFER_SIZE];

    // Создание сокета
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd < 0) {
        perror("Ошибка создания сокета");
        exit(1);
    }

    // Установка адреса сервера
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);
    inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);

    // Связывание сокета с адресом
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Ошибка связывания сокета");
        exit(1);
    }

    // Начало прослушивания
    if (listen(server_fd, 1) < 0) {
        perror("Ошибка начала прослушивания");
        exit(1);
    }

    printf("Сервер запущен. Ожидание подключения...\n");

    // Принятие подключения
    client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0) {
        perror("Ошибка принятия подключения");
        exit(1);
    }

    printf("Подключение принято. Обмен данными...\n");

    while (true) {
        // Чтение данных от клиента
        int bytes_received = read(client_fd, buffer, BUFFER_SIZE);
        if (bytes_received < 0) {
            perror("Ошибка чтения данных");
            break;
        }

        // Дестуффирование данных
        char unstuffed_buffer[BUFFER_SIZE];
        int unstuffed_len = 0;
        for (int i = 0; i < bytes_received; i++) {
            if (buffer[i] == ESC) {
                i++;
                unstuffed_buffer[unstuffed_len++] = buffer[i] ^ 0x20;
            } else {
                unstuffed_buffer[unstuffed_len++] = buffer[i];
            }
        }
        unstuffed_buffer[unstuffed_len] = '\0';

        printf("Полученные данные: %s\n", unstuffed_buffer);

        // Отправка ответа клиенту
        char response[] = "Hello, client!";
        byte_stuffing(response, strlen(response), stuffed_buffer);
        send(client_fd, stuffed_buffer, strlen(stuffed_buffer), 0);

        // Закрытие сокета
        close(client_fd);
        break;
    }

    close(server_fd);
    return 0;
}
